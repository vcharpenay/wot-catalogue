prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

# sparql --data BACnet/bacnet.ttl --data BLE\ GATT/gatt.ttl --data LWM2M/ipso.ttl --data OCF/oneiota.ttl --data oneM2M/haim.ttl --data Project\ Haystack/haystack.ttl --data wikidata-mapping.ttl --data wikidata-unique-matches.nt --query _script/count-matches-bottom.rq

select ?ambiguous ?total where {
    {
        select (count(*) / 2 as ?ambiguous) where {
            {
                select ?top where {
                    ?top a skos:Concept .
                    filter not exists { ?other skos:related ?top . }
                }
            }
            # twice the same subquery: pairwise comparison of tag sets
            {
                select ?top ?bottom1 (group_concat(?str ; separator = "_") as ?tags1) where {
                    {
                        select distinct ?top ?bottom ?str where {
                            ?top skos:related* ?c . ?c skos:related* ?bottom . ?bottom skos:related ?xsd .
                            filter (strstarts(str(?xsd), str(xsd:)))
                            ?c skos:mappingRelation ?tag .
                            ?tag skos:closeMatch ?e .
                            bind (replace(str(?tag), "tag:", "") as ?str)
                        } order by ?str
                    }
                    bind (?bottom as ?bottom1)
                } group by ?top ?bottom1
            }
            {
                select ?top ?bottom2 (group_concat(?str ; separator = "_") as ?tags2) where {
                    {
                        select distinct ?top ?bottom ?str where {
                            {
                                select ?top where {
                                    ?top a skos:Concept .
                                    filter not exists { ?other skos:related ?top . }
                                }
                            }
                            ?top skos:related* ?c . ?c skos:related* ?bottom . ?bottom skos:related ?xsd .
                            filter (strstarts(str(?xsd), str(xsd:)))
                            ?c skos:mappingRelation ?tag .
                            ?tag skos:closeMatch ?e .
                            bind (replace(str(?tag), "tag:", "") as ?str)
                        } order by ?str
                    }
                    bind (?bottom as ?bottom2)
                } group by ?top ?bottom2
            }
            filter (?bottom1 != ?bottom2 && ?tags1 = ?tags2)
        }
    }
    {
        select distinct (count(*) as ?total) where {
            ?bottom skos:related ?xsd .
            filter (strstarts(str(?xsd), str(xsd:)))
        }
    }
}
