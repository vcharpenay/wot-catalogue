@prefix onem2m: <http://purl.org/wot-catalogue/onem2m#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

onem2m:scheme a skos:ConceptScheme;
  rdfs:seeAlso <https://github.com/Homegateway/SmartDeviceTemplate>;
  skos:hasTopConcept onem2m:Device;
  skos:prefLabel "Smart Device Template" .

onem2m:Device a skos:Concept;
  skos:altLabel "device";
  skos:definition "For each physical device on the network at least one Device must be defined. If the physical device is a simple device, i.e. it does not contain embedded devices, e.g. a light switch, it does not include further SubDevices. On the other hand, if the physical is a compound device, i.e. it does contain embedded devices that can be addressed separately, the Device should contain SubDevices for each of the identifiable embedded devices.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "Device";
  skos:related onem2m:Module, onem2m:Property .

onem2m:Module a skos:Concept;
  skos:altLabel "module";
  skos:definition "Module elements are basically constraints or templates for how to model functionality of real things/appliances/devices within the Domain. There could be an infinite number of possible functionalities, however it is recommended to identify a not-too-large selection of them as generic examples and allow for additional proprietary extensions. In a particular Domain there will be one Module for each of the agreed ModuleClasses plus additional ones for each extension of a ModuleClass.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "Module";
  skos:related onem2m:Action, onem2m:DataPoint, onem2m:Event, onem2m:Property .

onem2m:Property a skos:Concept;
  skos:altLabel "property";
  skos:definition "Property elements are used to append to Devices and their ModuleClass elements with arbitrary additional information. For Devices it would be very common for a manufacturer to want to add into the XML file which is describing the device such information as \"Manufacturing Site\", \"Date of Manufacture\", \"Certification Code\", \"Energy Label Code\", \"compatible LAN technology\", \"URL for the device handbook\", \"physical limits of operation environments\", etc.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "Property";
  skos:related onem2m:DataType .

onem2m:DataPoint a skos:Concept;
  skos:altLabel "data point";
  skos:definition "A DataPoint element represents an aspect of a device which can be read/written to, and forms part of a deviceâ€™s data model. Manipulating DataPoints is the most common way of controlling devices. Each DataPoint has an associated type (e.g. simple integer/real numbers, string of text, struct, or arrays thereof) which facillitates data integrity. Note that all RESTful systems (e.g. CoAP) use only DataPoint operations, so the mapping of a data models using an SDT into RESTful applications is easy.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "DataPoint";
  skos:related onem2m:DataType .

onem2m:Action a skos:Concept;
  skos:altLabel "action";
  skos:definition "Action elements are an efficient way of describing arbitrary sequences of operations/methods; these are very common in automation. Typical example include \"FactoryReset\", and \"AutoCalibrate\". Actions preserve transaction integrity by putting together all the parameters (\"args\", see next section) with the method which checks and executes them, in one step.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "Action";
  skos:related onem2m:DataType .

onem2m:Event a skos:Concept;
  skos:altLabel "event";
  skos:definition "Event elements are needed for automation protocols which \"push\" information, instead of relying on polling by the software application. A typical example would be a \"SensorAlert\" where a window sensor immediately transmits a change of its state from \"closed\" to \"open\", which could be used in a burglar alarm application, needs to be ready to accept such information immediately, and not wait for a regular polling of the device.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "Event";
  skos:related onem2m:DataPoint .

onem2m:DataType a skos:Concept;
  skos:altLabel "data type";
  skos:definition "The data type can be simple integers or string text, or rather complex. The DataType element is a \"container\" for the various aspects of a type.";
  skos:inScheme onem2m:scheme;
  skos:prefLabel "DataType" .
