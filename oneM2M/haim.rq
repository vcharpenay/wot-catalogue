prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix sd: <http://www.w3.org/ns/sparql-service-description#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix base: <http://www.onem2m.org/ontology/Base_Ontology#>
prefix sdt: <http://www.onem2m.org/ontology/SDT#>
prefix hd: <http://www.onem2m.org/ontology/HD#>

# curl https://raw.githubusercontent.com/vcharpenay/wot-cloud/master/owl/oneM2M_HAIM.ttl > haim-owl.ttl
# sparql --data haim-owl.ttl --query haim.rq > haim.ttl

construct {
  ?mod a skos:Concept ;
       rdfs:label ?modLabel ;
       skos:definition ?modDef .
  sdt:Module skos:narrower ?mod .
  ?characteristic a skos:Concept ;
                  rdfs:label ?characteristicLabel ;
                  skos:definition ?characteristicDef .
  ?type skos:narrower ?characteristic .
  ?mod skos:related ?characteristic .
  ?characteristic skos:related ?dt .
  sdt:DataType skos:narrower ?enum .

  ?mod skos:inScheme sdt: .
  ?characteristic skos:inScheme sdt: .
} where {
  ?mod rdfs:subClassOf sdt:ModuleClass, ?opRestriction ;
       rdfs:label ?modLabel ;
       rdfs:comment ?modDef .
  ?opRestriction a owl:Restriction ;
                 owl:onProperty base:hasOperation ;
                 owl:allValuesFrom ?characteristic .
  ?characteristic rdfs:subClassOf ?type ;
                  rdfs:label ?characteristicLabel ;
                  rdfs:comment ?characteristicDef .
  values ?type { sdt:DataPoint sdt:Action sdt:Property sdt:Event }
  ?characteristic rdfs:subClassOf ?outRestriction .
  ?outRestriction a owl:Restriction ;
                  owl:onProperty base:hasOutput ;
                  owl:allValuesFrom ?out .
  ?out rdfs:subClassOf ?dtRestriction .
  ?dtRestriction a owl:Restriction ;
                  owl:onProperty base:hasDataTypeAndRange ;
                  owl:hasValue ?val .
  bind (if(strstarts(?val, "xs:"), iri(replace(?val, "xs:", str(xsd:))),
        if(strstarts(?val, "hd:"), iri(replace(?val, "hd:", str(hd:))),
        ?val)) as ?dt)
  bind (if(strstarts(?val, "hd:"), ?dt, lcase(?dt)) as ?enum) # conditional binding
}
